# -*- coding: utf-8 -*-
"""IRIS FLOWER CLASSIFICATION

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qTWbwGj5zi5M66pyK_ea3NJbNFLgTidg
"""

import pandas as pd
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.svm import SVC
from sklearn.metrics import classification_report
data=pd.read_csv("/content/IRIS.csv")

# Step 1: Load the Dataset
iris = load_iris()
X, y = iris.data, iris.target

# Step 2: Explore the Dataset (Optional)
# No missing values or preprocessing required for the Iris dataset

# Step 3: Preprocess the Data (Optional)
# Since all features are numerical and have similar scales, no preprocessing is needed in this case.
# However, it's a good practice to scale the features for some models, like Support Vector Machines.

# Step 4: Split the Data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Choose a Model
model = Pipeline([
    ('scaler', StandardScaler()),  # Scale features
    ('svm', SVC(kernel='rbf', C=1.0, gamma='scale'))  # Support Vector Machine classifier
])

# Step 6: Train the Model
model.fit(X_train, y_train)

# Step 7: Evaluate the Model
y_pred = model.predict(X_test)
print("Classification Report:")
print(classification_report(y_test, y_pred, target_names=iris.target_names))

# Step 8: Tune Hyperparameters (Optional)
# You can use techniques like GridSearchCV or RandomizedSearchCV to tune hyperparameters.

# Step 9: Make Predictions
# Now the model is ready to make predictions on new data.

# Step 10: Deploy the Model (Optional)
# Deploy the trained model in a production environment for practical use.