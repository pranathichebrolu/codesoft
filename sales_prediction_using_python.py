# -*- coding: utf-8 -*-
"""SALES PREDICTION USING PYTHON

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FLYcIx93gGtoM4-Ul1ITZjDyEf3EI9vH
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error

# Step 1: Data Collection
# Assume you have a CSV file named 'advertising.csv' containing historical sales data
data = pd.read_csv('/content/advertising.csv')

# Step 2: Data Preprocessing (if needed)
# For simplicity, let's assume the data is already preprocessed and no further preprocessing is needed

# Step 3: Feature Selection
# Assume 'TV', 'Radio', and 'Newspaper' are relevant features, and 'Sales' is the target variable
features = ['TV', 'Radio', 'Newspaper']
target = 'Sales'

# Step 4: Model Selection
model = LinearRegression()

# Step 5: Model Training
X = data[features]
y = data[target]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model.fit(X_train, y_train)

# Step 6: Model Evaluation
y_pred = model.predict(X_test)

mse = mean_squared_error(y_test, y_pred)
mae = mean_absolute_error(y_test, y_pred)

print('Mean Squared Error:', mse)
print('Mean Absolute Error:', mae)

# Step 7: Prediction and Optimization
# Now you can use the trained model to make predictions on new data and optimize it as needed

# Step 8: Deployment
# Deploy the trained model for practical use, such as in a web application or API

# Step 9: Monitoring and Maintenance
# Monitor the model's performance over time and update it regularly with new data to ensure accurate predictions